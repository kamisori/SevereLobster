<?xml version="1.0" encoding="UTF-8"?>
<root xmlns:nsd="http://structorizer.fisch.lu/" text="&#34;SOLVINGSTRATEGYSTANDARD&#34;" comment="" color="ffffff" type="program" style="nice">
	<children>
		<call text="&#34;EditCheckOrphanedArrows()&#34;" comment="" color="ffffff"></call>
		<call text="&#34;EditCheckEmptyField()&#34;" comment="&#34;&#34;" color="ffffff"></call>
		<call text="&#34;solvedField := SolvingStepPossibleStars.execute(solvedField)&#34;" comment="&#34;&#34;" color="ffffff"></call>
		<call text="&#34;solvedField := SolvingStepExcludeImpossibles.execute(solvedField)&#34;" comment="&#34;&#34;" color="ffffff"></call>
		<call text="&#34;solvedField := SolvingStepCheckZeroColumns.execute(solvedField)&#34;" comment="&#34;&#34;" color="ffffff"></call>
		<call text="&#34;solvedField := SolvingStepCheckZeroRows.execute(solvedField)&#34;" comment="&#34;&#34;" color="ffffff"></call>
		<instruction text="&#34;abbruch := false&#34;" comment="" color="ffffff" rotated="0"></instruction>
		<while text="&#34;!solvedField.isSolved() &amp;&amp; !abbruch&#34;" comment="" color="ffffff">
			<qWhile>
				<instruction text="&#34;before := solvedField&#34;" comment="" color="ffffff" rotated="0"></instruction>
				<call text="&#34;solvedField := SolvingStepMissingStarsInColumn.execute(solvedField)&#34;" comment="&#34;&#34;" color="ffffff"></call>
				<call text="&#34;solvedField := SolvingStepMissingStarsInRow.execute(solvedField)&#34;" comment="&#34;&#34;" color="ffffff"></call>
				<call text="&#34;solvedField := SolvingStepExcludeRestInColumn.execute(solvedField)&#34;" comment="&#34;&#34;" color="ffffff"></call>
				<call text="&#34;solvedField := SolvingStepExcludeRestInRow.execute(solvedField)&#34;" comment="&#34;&#34;" color="ffffff"></call>
				<call text="&#34;solvedField := SolvingStepSingleStarBeforeArrow.execute(solvedField)&#34;" comment="&#34;&#34;" color="ffffff"></call>
				<alternative text="&#34;solvedField == before&#34;" comment="" color="ffffff">
					<qTrue>
						<instruction text="&#34;abbruch := true&#34;" comment="" color="ffffff" rotated="0"></instruction>
					</qTrue>
					<qFalse>
						<instruction text="&#34;abbruch := false&#34;" comment="" color="ffffff" rotated="0"></instruction>
					</qFalse>
				</alternative>
			</qWhile>
		</while>
		<alternative text="&#34;abbruch&#34;" comment="" color="ffffff">
			<qTrue>
				<instruction text="&#34;moeglich := solvedField.countMoeglicheSterne()&#34;" comment="" color="ffffff" rotated="0"></instruction>
				<instruction text="&#34;loesungswegEinsprungspunkte := []&#34;" comment="" color="ffffff" rotated="0"></instruction>
				<for text="&#34;i := 0, i &#60; moeglich, i++&#34;" comment="" color="ffffff">
					<qFor>
						<instruction text="&#34;raten := solvedField&#34;" comment="" color="ffffff" rotated="0"></instruction>
						<call text="&#34;nextGuess := nextPossibleStar(raten,i)&#34;" comment="&#34;&#34;" color="ffffff"></call>
						<instruction text="&#34;loesungspunktEinsprungspunkte.add(nextGuess)&#34;" comment="" color="ffffff" rotated="0"></instruction>
						<instruction text="&#34;raten.setSpielstein(nextGuess.x,nextGuess.y,Stern)&#34;" comment="" color="ffffff" rotated="0"></instruction>
						<instruction text="&#34;ratenAbbruch := false;&#34;" comment="" color="ffffff" rotated="0"></instruction>
						<while text="&#34;!raten.isSolved() &amp;&amp; !ratenAbbruch&#34;" comment="" color="ffffff">
							<qWhile>
								<instruction text="&#34;beforeRaten := raten&#34;" comment="" color="ffffff" rotated="0"></instruction>
								<call text="&#34;raten = SolvingStepMissingStarsInColumn().execute(raten)&#34;" comment="&#34;&#34;" color="ffffff"></call>
								<call text="&#34;raten = SolvingStepMissingStarsInRow().execute(raten)&#34;" comment="&#34;&#34;" color="ffffff"></call>
								<call text="&#34;raten = SolvingStepExcludeRestInColumn().execute(raten)&#34;" comment="&#34;&#34;" color="ffffff"></call>
								<call text="&#34;raten = SolvingStepExcludeRestInRow().execute(raten)&#34;" comment="&#34;&#34;" color="ffffff"></call>
								<call text="&#34;raten = SolvingStepSingleStarBeforeArrow().execute(raten)&#34;" comment="&#34;&#34;" color="ffffff"></call>
								<alternative text="&#34;raten == beforeRaten&#34;" comment="" color="ffffff">
									<qTrue>
										<instruction text="&#34;ratenAbbruch := true&#34;" comment="" color="ffffff" rotated="0"></instruction>
									</qTrue>
									<qFalse>
									</qFalse>
								</alternative>
							</qWhile>
						</while>
						<alternative text="&#34;ratenAbbruch&#34;" comment="" color="ffffff">
							<qTrue>
								<instruction text="&#34;loesungswegEinsprungspunkte.remove(nextGuess)&#34;" comment="" color="ffffff" rotated="0"></instruction>
							</qTrue>
							<qFalse>
							</qFalse>
						</alternative>
					</qFor>
				</for>
				<alternative text="&#34;loesungswegEinsprungspunkte.size &#62; 0&#34;" comment="" color="ffffff">
					<qTrue>
						<instruction text="&#34;_solvable := true&#34;" comment="" color="ffffff" rotated="0"></instruction>
						<instruction text="&#34;_unique := false&#34;" comment="" color="ffffff" rotated="0"></instruction>
					</qTrue>
					<qFalse>
						<instruction text="&#34;_solvable := false&#34;" comment="" color="ffffff" rotated="0"></instruction>
					</qFalse>
				</alternative>
			</qTrue>
			<qFalse>
				<instruction text="&#34;_solvable := true&#34;" comment="" color="ffffff" rotated="0"></instruction>
				<instruction text="&#34;_unique := true&#34;" comment="" color="ffffff" rotated="0"></instruction>
			</qFalse>
		</alternative>
	</children>
</root>